/******************************************************************************
*                 SOFA, Simulation Open-Framework Architecture                *
*                    (c) 2006 INRIA, USTL, UJF, CNRS, MGH                     *
*                                                                             *
* This program is free software; you can redistribute it and/or modify it     *
* under the terms of the GNU Lesser General Public License as published by    *
* the Free Software Foundation; either version 2.1 of the License, or (at     *
* your option) any later version.                                             *
*                                                                             *
* This program is distributed in the hope that it will be useful, but WITHOUT *
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or       *
* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License *
* for more details.                                                           *
*                                                                             *
* You should have received a copy of the GNU Lesser General Public License    *
* along with this program. If not, see <http://www.gnu.org/licenses/>.        *
*******************************************************************************
* Authors: The SOFA Team and external contributors (see Authors.txt)          *
*                                                                             *
* Contact information: contact@sofa-framework.org                             *
******************************************************************************/
#pragma once

#include <sofa/config/sharedlibrary_defines.h>
#include <sofa/config/build_option_dump_visitor.h>
#include <sofa/config/build_option_threading.h>
#include <sofa/config/build_option_bbox.h>

#include <cstddef> // For nullptr
#include <limits> // std::numeric_limits<>

// fixes CGAL plugin build errors (default value: 5)
#define BOOST_PARAMETER_MAX_ARITY 12

#cmakedefine SOFA_DETECTIONOUTPUT_FREEMOTION

#cmakedefine SOFA_FLOAT
#cmakedefine SOFA_DOUBLE

#cmakedefine SOFA_WITH_FLOAT
#cmakedefine SOFA_WITH_DOUBLE

#cmakedefine SOFA_USE_MASK

#cmakedefine SOFA_WITH_DEVTOOLS

#ifdef _MSC_VER
#define EIGEN_DONT_ALIGN
#endif // _MSC_VER

#ifdef SOFA_FLOAT
typedef float SReal;
#else
typedef double SReal;
#endif


#if defined(_WIN32)
#  ifndef NOMINMAX
#    define NOMINMAX
#  endif
#endif

// snprintf() has been provided since MSVC++ 14 (Visual Studio 2015).  For other
// versions, it is simply #defined to _snprintf().
#if (defined(_MSC_VER) && _MSC_VER < 1900)
#  define snprintf _snprintf
#endif

#ifdef _WIN32
#define WIN32_LEAN_AND_MEAN
#  include <windows.h>
#undef WIN32_LEAN_AND_MEAN
#endif

#ifdef BOOST_NO_EXCEPTIONS
#  include<exception>

namespace boost
{
    inline void throw_exception(std::exception const & e)
    {
        return;
    }
}
#endif // BOOST_NO_EXCEPTIONS


#ifdef _MSC_VER
#  ifndef _USE_MATH_DEFINES
#    define _USE_MATH_DEFINES 1 // required to get M_PI from math.h
#  endif
// Visual C++ does not include stdint.h
typedef signed __int8		int8_t;
typedef signed __int16		int16_t;
typedef signed __int32		int32_t;
typedef signed __int64		int64_t;
typedef unsigned __int8		uint8_t;
typedef unsigned __int16	uint16_t;
typedef unsigned __int32	uint32_t;
typedef unsigned __int64	uint64_t;
#else
#  include <stdint.h>
#endif

#define sofa_do_concat2(a,b) a ## b
#define sofa_do_concat(a,b) sofa_do_concat2(a,b)
#define sofa_concat(a,b) sofa_do_concat(a,b)

#define sofa_do_tostring(a) #a
#define sofa_tostring(a) sofa_do_tostring(a)

#ifdef _WIN32
#  define SOFA_PRAGMA_MESSAGE(text) __pragma(message(__FILE__ "(" sofa_tostring(__LINE__) "): " #text))
#  define SOFA_PRAGMA_WARNING(text) __pragma(message(__FILE__ "(" sofa_tostring(__LINE__) "): warning: " #text))
#else
#  define SOFA_DO_PRAGMA(x) _Pragma(#x)
#  define SOFA_PRAGMA_MESSAGE(text) SOFA_DO_PRAGMA(message #text)
#  define SOFA_PRAGMA_WARNING(text) SOFA_DO_PRAGMA(GCC warning #text)
#endif

/************* DEPRECATION MACROS *************/

#define SOFA_DEPRECATED_HEADER(untilVersion, newHeader) SOFA_PRAGMA_WARNING( \
    This header is deprecated and will be removed at SOFA untilVersion.      \
    To fix this warning you must include newHeader instead. )

#define SOFA_ATTRIBUTE_DEPRECATED(deprecateDate, removeDate, toFixMsg) \
    [[deprecated( \
    "It is still usable but has been DEPRECATED since " deprecateDate ". " \
    "You have until " removeDate " to fix your code. " toFixMsg)]]

#define SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg) \
    [[deprecated( \
    "It is not usable anymore because it has been DISABLED since " disableDate " " \
    "after being deprecated on " deprecateDate ". " toFixMsg)]]


#define SOFA_ATTRIBUTE_DEPRECATED__CLASSNAME_INTROSPECTION() \
    SOFA_ATTRIBUTE_DEPRECATED( \
        "v20.06 (PR#1283)", "v21.06", \
        "Information on how to update your code is provided in the PR description. ")


#define SOFA_ATTRIBUTE_DISABLED__COMPONENTSTATE(msg) \
    SOFA_ATTRIBUTE_DISABLED( \
        "v20.12 (PR#1358)", "v20.12", msg)


#define SOFA_ATTRIBUTE_DISABLED__DATALINK() \
    SOFA_ATTRIBUTE_DISABLED( \
        "v20.12 (PR#1503)", "v21.06 (PR#1793)", \
        "Link<> cannot hold BaseData anymore. " \
        "To make a link between Datas use DataLink instead. ")

#define SOFA_ATTRIBUTE_REMOVAL_OF_BASEDATA_OWNERCLASS_ACCESSOR(msg) \
    SOFA_ATTRIBUTE_DEPRECATED( \
        "v21.06 (PR#1890)", "v21.12", \
        "BaseData API has changed. " msg)

#define SOFA_ATTRIBUTE_DISABLED__DATA_OPERATOR(msg) \
    SOFA_ATTRIBUTE_DISABLED( \
        "v20.12 (PR#1639)", "v21.06 (PR#1793)", \
        "Equality operator was removed from Data. " msg)


#define SOFA_ATTRIBUTE_DEPRECATED__TDATA_INTO_DATA(msg) \
    SOFA_ATTRIBUTE_DEPRECATED( \
        "v21.06 (PR#1753)", "v21.12", \
        "Data API has changed. " msg)

#define SOFA_ATTRIBUTE_DISABLED__TDATA_INTO_DATA(msg) \
    SOFA_ATTRIBUTE_DISABLED( \
        "v21.06 (PR#1753)", "v21.06 (PR#1793)", \
        "Data API has changed. " msg)


#define SOFA_ATTRIBUTE_DEPRECATED__ASPECT(msg) \
    SOFA_ATTRIBUTE_DEPRECATED( \
        "v20.06 (PR#1269)", "v21.12", \
        "Aspects have been removed. " msg)

#define SOFA_ATTRIBUTE_DISABLED__ASPECT(msg) \
    SOFA_ATTRIBUTE_DISABLED( \
        "v20.06 (PR#1269)", "v21.06 (PR#1793)", \
        "Aspects have been removed. " msg)

#define SOFA_ATTRIBUTE_DEPRECATED__ASPECT_EXECPARAMS() \
    SOFA_ATTRIBUTE_DEPRECATED__ASPECT( \
        "ExecParams are not needed anymore. " \
        "Remove the ExecParams argument from your call. ")

#define SOFA_ATTRIBUTE_DISABLED__ASPECT_EXECPARAMS() \
    SOFA_ATTRIBUTE_DISABLED__ASPECT( \
        "ExecParams are not needed anymore. " \
        "Remove the ExecParams argument from your call. ")

#define SOFA_ATTRIBUTE_DISABLED__BASEOBJECT_SEARCH(msg) \
    SOFA_ATTRIBUTE_DISABLED( \
        "v21.06 (PR#1842)", "v21.06 (PR#1842)", \
        "This function was removed as it duplicates a function that can be done using getContext(). " msg)

/**********************************************/

#define SOFA_DECL_CLASS(name) // extern "C" { int sofa_concat(class_,name) = 0; }
#define SOFA_LINK_CLASS(name) // extern "C" { extern int sofa_concat(class_,name); int sofa_concat(link_,name) = sofa_concat(class_,name); }

// Prevent compiler warnings about 'unused variables'.
// This should be used when a parameter name is needed (e.g. for
// documentation purposes) even if it is not used in the code.
#define SOFA_UNUSED(x) (void)(x)

// utility for debug tracing
#ifdef _MSC_VER
    #define SOFA_CLASS_METHOD ( std::string(this->getClassName()) + "::" + __FUNCTION__ + " " )
#else
    #define SOFA_CLASS_METHOD ( std::string(this->getClassName()) + "::" + __func__ + " " )
#endif


// The SOFA_EXTERN_TEMPLATE macro was used to control the use of extern templates in Sofa.
// It has been cleaned out in 41e0ab98bbb6e22b053b24e7bbdd31c8636336c9 "[ALL] Remove SOFA_EXTERN_TEMPLATE".
// Macro definition is kept to avoid breaking all external plugins.
#define SOFA_EXTERN_TEMPLATE

namespace sofa
{

using SignedIndex = int32_t;
using Index = uint32_t;
using Size = uint32_t;

constexpr Index InvalidID = (std::numeric_limits<Index>::max)(); 

}

